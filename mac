#!/bin/sh

# shellcheck disable=SC3043

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# .cfg folder/repo for dotfiles
# https://www.atlassian.com/git/tutorials/dotfiles
fancy_echo "Configure .cfg repository for dotfiles ..."
append_to_zshrc "alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'"

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# checks architecture
if [ "$(uname -m)" = "arm64" ]
  then
  # checks if Rosetta is already installed
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1
  then
    echo "Installing Rosetta"
    # Installs Rosetta2
    softwareupdate --install-rosetta --agree-to-license
  else
    echo "Rosetta is installed"
  fi
fi

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "homebrew/services"

# set arguments for all 'brew install --cask' commands
cask_args appdir: "~/Applications", require_sha: true

# Unix
brew "universal-ctags"
brew "git"
brew "git-delta"
brew "openssl"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "jq"

# Shell and Terminal
brew "starship"
cask "iterm2"

# Infrastructure as Code
brew "tfenv"
cask "docker"

# GitHub
brew "gh"
brew "gnupg"
brew "pinentry-mac"

# Image manipulation
brew "imagemagick"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
# brew "yarn"
# cask "gpg-suite-no-mail"

# Databases
# brew "postgresql@14", restart_service: :changed
# brew "redis", restart_service: :changed
cask "postgres-unofficial"

# IDEs
cask "jetbrains-toolbox"
cask "vscodium"

# Secrets
cask "bitwarden"

# Fonts
cask "font-jetbrains-mono-nerd-font"

# Applications
cask "slack"
cask "firefox"
EOF

fancy_echo "Configuring git ..."
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global core.pager delta
git config --global interactive.diffFilter 'delta --color-only'
git config --global delta.navigate true
git config --global merge.conflictStyle zdiff3

fancy_echo "Configuring starship ..."
# verify starship is not currently running, but command exists
if command -v starship >/dev/null 2>&1; then
  append_to_zshrc "eval \"\$(starship init zsh)\""
fi

fancy_echo "Configuring mise version manager ..."
if ! command -v mise >/dev/null; then
  brew install mise

  append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/mise activate zsh)\""
fi

# fancy_echo "Installing latest Ruby ..."
# mise use -g ruby

# fancy_echo "Installing latest Node ..."
# mise use -g node

fancy_echo "Setting up GPG for git signing and auth ..."
# https://alexnorell.com/post/set-up-gpg/#what-is-gpg
# https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e
if [ ! -d "$HOME/.gnupg" ]; then
  fancy_echo "Creating ~/.gnupg directory ..."
  mkdir "$HOME/.gnupg"
  chmod 700 "$HOME/.gnupg"

  echo "pinentry-program $(which pinentry-mac)" >>  ~/.gnupg/gpg-agent.conf

  gpg-connect-agent reloadagent /bye

  append_to_zshrc "export GPG_TTY=\"\$(tty)\""
  append_to_zshrc "export SSH_AUTH_SOCK=\$(gpgconf --list-dirs agent-ssh-socket)"
  append_to_zshrc "gpgconf --launch gpg-agent"
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi
